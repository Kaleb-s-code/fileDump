# ##  myFirstProg.py

# pi = 3.14
# radius = float(input("Enter radius:"))
# print("The radius is:", radius)
# baseArea = pi * radius ** 2
# print("The base area is:", baseArea)

# print(ord("8"))

## The for loop

# x = 50

# if x >= 50:
#     for i in range(x):
#         x += 100 
#         print(x, "Is a number")
# else:
#     for i in range(x):
#         x += 50
#         print(x, "is a number")

# ## Bill calculator

# bill = float(input("Enter the total of the bill: "))
# if bill > 0:
#     tax = .099
#     tip = .20
#     billTotal = ((bill * tax) * tip) + bill
#     print("Your bill after tax and tip came to: ${0:,.2f}".format(billTotal))
# elif bill >= 0:
#     print("You don't have to pay anything!")

## Guessing game   

# guess = input("Try and guess a letter in my head: ")
# numberOfGuesses = 0

# while guess != "z":
#     numberOfGuesses += 1
#     print("Nope, try again!")
#     print("you have guessed {0:.2f} times".format(numberOfGuesses))
# else:
#     print("Nice job! You have won the game.")

# if numberOfGuesses >= 50:
#     print("You suck at this game..And you lost!")
    
# guess = input("Try and guess the letter in my head: ")
# numberOfGuesses = 0

# if guess != "z":
#     input("You guessed incorrectly, try again: ")


# We worked on the ifOops program in class 10/10

# ref ifExample for notes on Loops

## Reading and writing to files 

# in1 = open("rainfall.txt", "r")
# out1 = open("rainout.txt", "w")
# lines = 0
# characters = 0
# add = 0.0
# for line in in1:
#     space = line.find(" ")
#     lines += 1
#     convert = float(line[space:])
#     cent = convert  * 2.54
#     add += convert 
#     average = (add / lines) * 2.54
#     out1.write("{0} had {1:.2f}cm of rain\n".format(line[0:space], cent))
#     for ch in line:
#         characters += 1
# out1.write("\nThere are {0:.2f} lines in this file, {1:.2f} characters, and the average rainfall is {2:.4f}cm. \nTotal rain fall is {3:.4f}cm".format(lines, characters, average, add * 2.54))
# in1.close()
# out1.close()

## The while loop continued...


    
# for i in range(10):
#     print(i)
    
# for x in range(7,10):
#     print("half of {}: {}".format(x, x / 2), end = ",")
    
## Started class with a refresher on while loops

# def inputMessage():
#     recieveInput()
# def recieveInput():
#     userInput = input("Would you like to hear a message? ")
#     return(userInput)

# def mainMessageFunction():
#     print("Wait for this important message!")
#     message()
#     anotherMessage()
#     print("...Hoped you like my message")
# def message():
#     print("THIS IS A MESSAGE!!")
# def anotherMessage():
#     print("This is a message that compliments the previous message")

# def mainCookiefunction():
#     makeBatter()
#     bakeCookies()
#     decorateCookies()
# def makeBatter():
#     print("1.You put some things in here")
#     print("2.Then you mix them around")
#     print("3.Then some stuff")
# def bakeCookies():
#     print("4.Then you do some more stuff")
#     print("5.Next you do some stuff")
#     print("6.And some more stuff")
# def decorateCookies():
#     print("7.Then you decorate them and do some stff")
#     print("8.Then you serve them")


# message = input("Would you like the directions for making cookies? ")

# if message == "yes":
#     print("Hold on to your pants!\n")
#     mainCookiefunction()

# x = int(input("enter a number: "))
# y = int(input("Enter a number: "))

# def mathFunction():
#     additionFunction()
#     subtractionFunction()
#     multFunction()
# def additionFunction():
#     global x 
#     global y 
#     var = x * y 
#     return(var)
# def subtractionFunction():
#     var = x - y
#     return(var)
# def multFunction():
#     var = x * y
#     return(var)
# mathFunction()
## randomizer 

# import random
# someNum = random.randint(1,6)

# import math
# def main():
#     print(function())
# def function():
#     varName = 5
#     return (varName + 4) * .25
#     # return(varName + 4) * .25
# main()

# import random

# print(random.random() + 2.0)

# print(random.uniform(2.0, 3.0))
# print("sales: " + "35.75")
# print("sales:", "35.75")

# Make sure you knoe how mods work and when to use them Digit extraction in the slide shows 

# THis program is supposed to keep a running total of numbers and add them up as the user puts them in

# primeingNumber = int(input("Enter a number: "))
# total = primeingNumber + followNumber
# if primeingNumber > 0:
#     doLoop = True
#     while doLoop == True:
#         total += number
#         followNumber = int(input("Enter another number: "))
#         print("\nyour current total is: {0}\n".format(total))


# # This function relates to a seperate program that I don't have at this writting inputvalidation.py. 
# def is_number(s):
#     try:
#         float(s)
#         return True
#     except ValueError:
#         return False

# userResponse = 'y'
# userNUmberlist = []
# while userResponse == 'y':
#     userInputNUmber = int(input("Enter a number: "))
#     userResponse = (input("Another?: "))
#     print(userNUmber)
#     if userResponse != 'y':
#         print("Something")

# ourList = []
# number = int(input("Enter a number: "))
# ourList.append(number)
# print(ourList)

# isSorted = True


# while num2 < 0:
#     if num1 > num2:
#         isSorted = False
#         num2 = num1
# print(isSorted)


###################
# More on Functions
###################

# The point is to break things into tasks that can be divided 
# We used the file fightsong to demonstarte the idea of a function 
# Do not use global vars when writing programs with functions

####################
# Local Vars
####################

# defined in function
# only seen in the function

####################
# Lists and stuff 
####################

# Know when out of bound errors will come into play
# you can use mathematical expressions with list objects 
# We went thought the slides for week 7 and followed the code around talking about it
#
myList = [6,0,3,5,4,69]
if myList[0] == 6 or len(myList) - 1 == 6:
    print(True)
else:
    print(False)
    
# Better way of doing it?
print(myList[0] == 6 or len(myList) - 1 == 6)

# Testing for one or more elements? Just use len function on the list. 
l2 = list("hello")
print(l2)

# Using some more functions and stuff 

myList = [55, 'dog', 4.57, 345]
if "dog" in myList:
    myList.remove("dog")
else:
    print("Dog not in list")
print(myList)

myList.sort()
print(myList)

#######################
# Range function
#######################

list1 = list(range(5))
# Doing things the manuak way instead of using range
i = 0
l2 = []

while i < 5:
    l2.append(i)
    i += 1
print(l2)

list2 = list(range(4, 30, 2))
print(list2)

list3 = list(range(5, -1, -1))
print(list3)

list4 = list("Green eggs and ham")
print(list4)

print(list4[9])

# A test program for anagrams 

# def main():
#     s1 = input("Enter a phrase: ")
#     s2 = input("Enter a phrase: ")
#     print(isanogram(s1,s2))
# def isanogram(str1,str2):
#     l1 = list(str1)
#     l2 = list(str2)
#     l1.sort()
#     l2.sort()
#     return l1 == l2
# main()

##########################
# Dispersion
########################

# Using ordinal values in this was important as well as max and min functions 

# Working around given functions again like min and max in this case... 
# This program were hardcoded versions of mmean, max, min and median 
# def main():
#     s1 = input("Enter a phrase: ")
#     s2 = input("Enter a phrase: ")
#     print(myMean(s1,s2))
# def myMean(str1,str2):
#     total = 0
#     while i < len(list1)
#     l1 = list(str1)
#     l2 = list(str2)
#     l1.sort()
#     l2.sort()
#     return l1 == l2
#     main()

############################
# Notes for class 11/26
############################

 Used grades.txt to use as index 
 Ref histoProgram.py which is based on the histogram program in 
 the slides
 for project 2 the accuracy should be %80
 This class was mainly about counter lists ref divideAndCon.py
 Check out the list parameter question 


 Final programming project
 ##########################
 ref voice memo 
 
 ############################
# Notes for class 11/28
############################
He mentioned being able to trace functions without running them on the final

healthytotal = [0] # 13
 if healthy:
    total h
    counts[0] += 1
else:
    tot i
    counts[1] + 1
print(htot, illtot)

pass a the totals and the specific index into average function

then get seperation vals (hAvs, iAvs)

it needs to look exactly like in the examples

get the accuracy(seperation values, in1)

increments counters for checking if the values above the test values are greater than 0 then the person is unhealthy, otherwise, they are healthy.

if things match, then you have made a correct diagnosis, otherwise its wrong. This is how you get the diagnosis percentage. So divide the counter in the end which should be less than 303 that should produce about .8

Last function for the cleaveland file:

open the in1 and send the stuff to an outfile
send to it the seperation values 
